// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dobrino/internal/pg/dbmodels"
)

func newBroadcastMessages(db *gorm.DB, opts ...gen.DOOption) broadcastMessages {
	_broadcastMessages := broadcastMessages{}

	_broadcastMessages.broadcastMessagesDo.UseDB(db, opts...)
	_broadcastMessages.broadcastMessagesDo.UseModel(&dbmodels.BroadcastMessages{})

	tableName := _broadcastMessages.broadcastMessagesDo.TableName()
	_broadcastMessages.ALL = field.NewAsterisk(tableName)
	_broadcastMessages.ID = field.NewInt32(tableName, "id")
	_broadcastMessages.IsSent = field.NewBool(tableName, "is_sent")
	_broadcastMessages.Message = field.NewString(tableName, "message")
	_broadcastMessages.Image = field.NewString(tableName, "image")

	_broadcastMessages.fillFieldMap()

	return _broadcastMessages
}

type broadcastMessages struct {
	broadcastMessagesDo

	ALL     field.Asterisk
	ID      field.Int32
	IsSent  field.Bool
	Message field.String
	Image   field.String

	fieldMap map[string]field.Expr
}

func (b broadcastMessages) Table(newTableName string) *broadcastMessages {
	b.broadcastMessagesDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b broadcastMessages) As(alias string) *broadcastMessages {
	b.broadcastMessagesDo.DO = *(b.broadcastMessagesDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *broadcastMessages) updateTableName(table string) *broadcastMessages {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.IsSent = field.NewBool(table, "is_sent")
	b.Message = field.NewString(table, "message")
	b.Image = field.NewString(table, "image")

	b.fillFieldMap()

	return b
}

func (b *broadcastMessages) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *broadcastMessages) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["id"] = b.ID
	b.fieldMap["is_sent"] = b.IsSent
	b.fieldMap["message"] = b.Message
	b.fieldMap["image"] = b.Image
}

func (b broadcastMessages) clone(db *gorm.DB) broadcastMessages {
	b.broadcastMessagesDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b broadcastMessages) replaceDB(db *gorm.DB) broadcastMessages {
	b.broadcastMessagesDo.ReplaceDB(db)
	return b
}

type broadcastMessagesDo struct{ gen.DO }

type IBroadcastMessagesDo interface {
	gen.SubQuery
	Debug() IBroadcastMessagesDo
	WithContext(ctx context.Context) IBroadcastMessagesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBroadcastMessagesDo
	WriteDB() IBroadcastMessagesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBroadcastMessagesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBroadcastMessagesDo
	Not(conds ...gen.Condition) IBroadcastMessagesDo
	Or(conds ...gen.Condition) IBroadcastMessagesDo
	Select(conds ...field.Expr) IBroadcastMessagesDo
	Where(conds ...gen.Condition) IBroadcastMessagesDo
	Order(conds ...field.Expr) IBroadcastMessagesDo
	Distinct(cols ...field.Expr) IBroadcastMessagesDo
	Omit(cols ...field.Expr) IBroadcastMessagesDo
	Join(table schema.Tabler, on ...field.Expr) IBroadcastMessagesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBroadcastMessagesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBroadcastMessagesDo
	Group(cols ...field.Expr) IBroadcastMessagesDo
	Having(conds ...gen.Condition) IBroadcastMessagesDo
	Limit(limit int) IBroadcastMessagesDo
	Offset(offset int) IBroadcastMessagesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBroadcastMessagesDo
	Unscoped() IBroadcastMessagesDo
	Create(values ...*dbmodels.BroadcastMessages) error
	CreateInBatches(values []*dbmodels.BroadcastMessages, batchSize int) error
	Save(values ...*dbmodels.BroadcastMessages) error
	First() (*dbmodels.BroadcastMessages, error)
	Take() (*dbmodels.BroadcastMessages, error)
	Last() (*dbmodels.BroadcastMessages, error)
	Find() ([]*dbmodels.BroadcastMessages, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.BroadcastMessages, err error)
	FindInBatches(result *[]*dbmodels.BroadcastMessages, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbmodels.BroadcastMessages) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBroadcastMessagesDo
	Assign(attrs ...field.AssignExpr) IBroadcastMessagesDo
	Joins(fields ...field.RelationField) IBroadcastMessagesDo
	Preload(fields ...field.RelationField) IBroadcastMessagesDo
	FirstOrInit() (*dbmodels.BroadcastMessages, error)
	FirstOrCreate() (*dbmodels.BroadcastMessages, error)
	FindByPage(offset int, limit int) (result []*dbmodels.BroadcastMessages, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBroadcastMessagesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b broadcastMessagesDo) Debug() IBroadcastMessagesDo {
	return b.withDO(b.DO.Debug())
}

func (b broadcastMessagesDo) WithContext(ctx context.Context) IBroadcastMessagesDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b broadcastMessagesDo) ReadDB() IBroadcastMessagesDo {
	return b.Clauses(dbresolver.Read)
}

func (b broadcastMessagesDo) WriteDB() IBroadcastMessagesDo {
	return b.Clauses(dbresolver.Write)
}

func (b broadcastMessagesDo) Session(config *gorm.Session) IBroadcastMessagesDo {
	return b.withDO(b.DO.Session(config))
}

func (b broadcastMessagesDo) Clauses(conds ...clause.Expression) IBroadcastMessagesDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b broadcastMessagesDo) Returning(value interface{}, columns ...string) IBroadcastMessagesDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b broadcastMessagesDo) Not(conds ...gen.Condition) IBroadcastMessagesDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b broadcastMessagesDo) Or(conds ...gen.Condition) IBroadcastMessagesDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b broadcastMessagesDo) Select(conds ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b broadcastMessagesDo) Where(conds ...gen.Condition) IBroadcastMessagesDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b broadcastMessagesDo) Order(conds ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b broadcastMessagesDo) Distinct(cols ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b broadcastMessagesDo) Omit(cols ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b broadcastMessagesDo) Join(table schema.Tabler, on ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b broadcastMessagesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b broadcastMessagesDo) RightJoin(table schema.Tabler, on ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b broadcastMessagesDo) Group(cols ...field.Expr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b broadcastMessagesDo) Having(conds ...gen.Condition) IBroadcastMessagesDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b broadcastMessagesDo) Limit(limit int) IBroadcastMessagesDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b broadcastMessagesDo) Offset(offset int) IBroadcastMessagesDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b broadcastMessagesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBroadcastMessagesDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b broadcastMessagesDo) Unscoped() IBroadcastMessagesDo {
	return b.withDO(b.DO.Unscoped())
}

func (b broadcastMessagesDo) Create(values ...*dbmodels.BroadcastMessages) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b broadcastMessagesDo) CreateInBatches(values []*dbmodels.BroadcastMessages, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b broadcastMessagesDo) Save(values ...*dbmodels.BroadcastMessages) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b broadcastMessagesDo) First() (*dbmodels.BroadcastMessages, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.BroadcastMessages), nil
	}
}

func (b broadcastMessagesDo) Take() (*dbmodels.BroadcastMessages, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.BroadcastMessages), nil
	}
}

func (b broadcastMessagesDo) Last() (*dbmodels.BroadcastMessages, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.BroadcastMessages), nil
	}
}

func (b broadcastMessagesDo) Find() ([]*dbmodels.BroadcastMessages, error) {
	result, err := b.DO.Find()
	return result.([]*dbmodels.BroadcastMessages), err
}

func (b broadcastMessagesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.BroadcastMessages, err error) {
	buf := make([]*dbmodels.BroadcastMessages, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b broadcastMessagesDo) FindInBatches(result *[]*dbmodels.BroadcastMessages, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b broadcastMessagesDo) Attrs(attrs ...field.AssignExpr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b broadcastMessagesDo) Assign(attrs ...field.AssignExpr) IBroadcastMessagesDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b broadcastMessagesDo) Joins(fields ...field.RelationField) IBroadcastMessagesDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b broadcastMessagesDo) Preload(fields ...field.RelationField) IBroadcastMessagesDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b broadcastMessagesDo) FirstOrInit() (*dbmodels.BroadcastMessages, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.BroadcastMessages), nil
	}
}

func (b broadcastMessagesDo) FirstOrCreate() (*dbmodels.BroadcastMessages, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.BroadcastMessages), nil
	}
}

func (b broadcastMessagesDo) FindByPage(offset int, limit int) (result []*dbmodels.BroadcastMessages, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b broadcastMessagesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b broadcastMessagesDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b broadcastMessagesDo) Delete(models ...*dbmodels.BroadcastMessages) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *broadcastMessagesDo) withDO(do gen.Dao) *broadcastMessagesDo {
	b.DO = *do.(*gen.DO)
	return b
}
