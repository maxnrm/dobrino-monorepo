// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dobrino/internal/pg/dbmodels"
)

func newButton(db *gorm.DB, opts ...gen.DOOption) button {
	_button := button{}

	_button.buttonDo.UseDB(db, opts...)
	_button.buttonDo.UseModel(&dbmodels.Button{})

	tableName := _button.buttonDo.TableName()
	_button.ALL = field.NewAsterisk(tableName)
	_button.ID = field.NewString(tableName, "id")
	_button.Sort = field.NewInt32(tableName, "sort")
	_button.Name = field.NewString(tableName, "name")
	_button.Message = field.NewString(tableName, "message")
	_button.Image = field.NewString(tableName, "image")

	_button.fillFieldMap()

	return _button
}

type button struct {
	buttonDo

	ALL     field.Asterisk
	ID      field.String
	Sort    field.Int32
	Name    field.String
	Message field.String
	Image   field.String

	fieldMap map[string]field.Expr
}

func (b button) Table(newTableName string) *button {
	b.buttonDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b button) As(alias string) *button {
	b.buttonDo.DO = *(b.buttonDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *button) updateTableName(table string) *button {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewString(table, "id")
	b.Sort = field.NewInt32(table, "sort")
	b.Name = field.NewString(table, "name")
	b.Message = field.NewString(table, "message")
	b.Image = field.NewString(table, "image")

	b.fillFieldMap()

	return b
}

func (b *button) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *button) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["id"] = b.ID
	b.fieldMap["sort"] = b.Sort
	b.fieldMap["name"] = b.Name
	b.fieldMap["message"] = b.Message
	b.fieldMap["image"] = b.Image
}

func (b button) clone(db *gorm.DB) button {
	b.buttonDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b button) replaceDB(db *gorm.DB) button {
	b.buttonDo.ReplaceDB(db)
	return b
}

type buttonDo struct{ gen.DO }

type IButtonDo interface {
	gen.SubQuery
	Debug() IButtonDo
	WithContext(ctx context.Context) IButtonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IButtonDo
	WriteDB() IButtonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IButtonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IButtonDo
	Not(conds ...gen.Condition) IButtonDo
	Or(conds ...gen.Condition) IButtonDo
	Select(conds ...field.Expr) IButtonDo
	Where(conds ...gen.Condition) IButtonDo
	Order(conds ...field.Expr) IButtonDo
	Distinct(cols ...field.Expr) IButtonDo
	Omit(cols ...field.Expr) IButtonDo
	Join(table schema.Tabler, on ...field.Expr) IButtonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IButtonDo
	RightJoin(table schema.Tabler, on ...field.Expr) IButtonDo
	Group(cols ...field.Expr) IButtonDo
	Having(conds ...gen.Condition) IButtonDo
	Limit(limit int) IButtonDo
	Offset(offset int) IButtonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IButtonDo
	Unscoped() IButtonDo
	Create(values ...*dbmodels.Button) error
	CreateInBatches(values []*dbmodels.Button, batchSize int) error
	Save(values ...*dbmodels.Button) error
	First() (*dbmodels.Button, error)
	Take() (*dbmodels.Button, error)
	Last() (*dbmodels.Button, error)
	Find() ([]*dbmodels.Button, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.Button, err error)
	FindInBatches(result *[]*dbmodels.Button, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbmodels.Button) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IButtonDo
	Assign(attrs ...field.AssignExpr) IButtonDo
	Joins(fields ...field.RelationField) IButtonDo
	Preload(fields ...field.RelationField) IButtonDo
	FirstOrInit() (*dbmodels.Button, error)
	FirstOrCreate() (*dbmodels.Button, error)
	FindByPage(offset int, limit int) (result []*dbmodels.Button, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IButtonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b buttonDo) Debug() IButtonDo {
	return b.withDO(b.DO.Debug())
}

func (b buttonDo) WithContext(ctx context.Context) IButtonDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b buttonDo) ReadDB() IButtonDo {
	return b.Clauses(dbresolver.Read)
}

func (b buttonDo) WriteDB() IButtonDo {
	return b.Clauses(dbresolver.Write)
}

func (b buttonDo) Session(config *gorm.Session) IButtonDo {
	return b.withDO(b.DO.Session(config))
}

func (b buttonDo) Clauses(conds ...clause.Expression) IButtonDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b buttonDo) Returning(value interface{}, columns ...string) IButtonDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b buttonDo) Not(conds ...gen.Condition) IButtonDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b buttonDo) Or(conds ...gen.Condition) IButtonDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b buttonDo) Select(conds ...field.Expr) IButtonDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b buttonDo) Where(conds ...gen.Condition) IButtonDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b buttonDo) Order(conds ...field.Expr) IButtonDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b buttonDo) Distinct(cols ...field.Expr) IButtonDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b buttonDo) Omit(cols ...field.Expr) IButtonDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b buttonDo) Join(table schema.Tabler, on ...field.Expr) IButtonDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b buttonDo) LeftJoin(table schema.Tabler, on ...field.Expr) IButtonDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b buttonDo) RightJoin(table schema.Tabler, on ...field.Expr) IButtonDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b buttonDo) Group(cols ...field.Expr) IButtonDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b buttonDo) Having(conds ...gen.Condition) IButtonDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b buttonDo) Limit(limit int) IButtonDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b buttonDo) Offset(offset int) IButtonDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b buttonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IButtonDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b buttonDo) Unscoped() IButtonDo {
	return b.withDO(b.DO.Unscoped())
}

func (b buttonDo) Create(values ...*dbmodels.Button) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b buttonDo) CreateInBatches(values []*dbmodels.Button, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b buttonDo) Save(values ...*dbmodels.Button) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b buttonDo) First() (*dbmodels.Button, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Button), nil
	}
}

func (b buttonDo) Take() (*dbmodels.Button, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Button), nil
	}
}

func (b buttonDo) Last() (*dbmodels.Button, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Button), nil
	}
}

func (b buttonDo) Find() ([]*dbmodels.Button, error) {
	result, err := b.DO.Find()
	return result.([]*dbmodels.Button), err
}

func (b buttonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.Button, err error) {
	buf := make([]*dbmodels.Button, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b buttonDo) FindInBatches(result *[]*dbmodels.Button, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b buttonDo) Attrs(attrs ...field.AssignExpr) IButtonDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b buttonDo) Assign(attrs ...field.AssignExpr) IButtonDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b buttonDo) Joins(fields ...field.RelationField) IButtonDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b buttonDo) Preload(fields ...field.RelationField) IButtonDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b buttonDo) FirstOrInit() (*dbmodels.Button, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Button), nil
	}
}

func (b buttonDo) FirstOrCreate() (*dbmodels.Button, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Button), nil
	}
}

func (b buttonDo) FindByPage(offset int, limit int) (result []*dbmodels.Button, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b buttonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b buttonDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b buttonDo) Delete(models ...*dbmodels.Button) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *buttonDo) withDO(do gen.Dao) *buttonDo {
	b.DO = *do.(*gen.DO)
	return b
}
