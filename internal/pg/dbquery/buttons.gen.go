// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dobrino/internal/pg/dbmodels"
)

func newButtons(db *gorm.DB, opts ...gen.DOOption) buttons {
	_buttons := buttons{}

	_buttons.buttonsDo.UseDB(db, opts...)
	_buttons.buttonsDo.UseModel(&dbmodels.Buttons{})

	tableName := _buttons.buttonsDo.TableName()
	_buttons.ALL = field.NewAsterisk(tableName)
	_buttons.ID = field.NewString(tableName, "id")
	_buttons.Sort = field.NewInt32(tableName, "sort")
	_buttons.Name = field.NewString(tableName, "name")
	_buttons.Message = field.NewString(tableName, "message")
	_buttons.Image = field.NewString(tableName, "image")

	_buttons.fillFieldMap()

	return _buttons
}

type buttons struct {
	buttonsDo

	ALL     field.Asterisk
	ID      field.String
	Sort    field.Int32
	Name    field.String
	Message field.String
	Image   field.String

	fieldMap map[string]field.Expr
}

func (b buttons) Table(newTableName string) *buttons {
	b.buttonsDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b buttons) As(alias string) *buttons {
	b.buttonsDo.DO = *(b.buttonsDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *buttons) updateTableName(table string) *buttons {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewString(table, "id")
	b.Sort = field.NewInt32(table, "sort")
	b.Name = field.NewString(table, "name")
	b.Message = field.NewString(table, "message")
	b.Image = field.NewString(table, "image")

	b.fillFieldMap()

	return b
}

func (b *buttons) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *buttons) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["id"] = b.ID
	b.fieldMap["sort"] = b.Sort
	b.fieldMap["name"] = b.Name
	b.fieldMap["message"] = b.Message
	b.fieldMap["image"] = b.Image
}

func (b buttons) clone(db *gorm.DB) buttons {
	b.buttonsDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b buttons) replaceDB(db *gorm.DB) buttons {
	b.buttonsDo.ReplaceDB(db)
	return b
}

type buttonsDo struct{ gen.DO }

type IButtonsDo interface {
	gen.SubQuery
	Debug() IButtonsDo
	WithContext(ctx context.Context) IButtonsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IButtonsDo
	WriteDB() IButtonsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IButtonsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IButtonsDo
	Not(conds ...gen.Condition) IButtonsDo
	Or(conds ...gen.Condition) IButtonsDo
	Select(conds ...field.Expr) IButtonsDo
	Where(conds ...gen.Condition) IButtonsDo
	Order(conds ...field.Expr) IButtonsDo
	Distinct(cols ...field.Expr) IButtonsDo
	Omit(cols ...field.Expr) IButtonsDo
	Join(table schema.Tabler, on ...field.Expr) IButtonsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IButtonsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IButtonsDo
	Group(cols ...field.Expr) IButtonsDo
	Having(conds ...gen.Condition) IButtonsDo
	Limit(limit int) IButtonsDo
	Offset(offset int) IButtonsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IButtonsDo
	Unscoped() IButtonsDo
	Create(values ...*dbmodels.Buttons) error
	CreateInBatches(values []*dbmodels.Buttons, batchSize int) error
	Save(values ...*dbmodels.Buttons) error
	First() (*dbmodels.Buttons, error)
	Take() (*dbmodels.Buttons, error)
	Last() (*dbmodels.Buttons, error)
	Find() ([]*dbmodels.Buttons, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.Buttons, err error)
	FindInBatches(result *[]*dbmodels.Buttons, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbmodels.Buttons) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IButtonsDo
	Assign(attrs ...field.AssignExpr) IButtonsDo
	Joins(fields ...field.RelationField) IButtonsDo
	Preload(fields ...field.RelationField) IButtonsDo
	FirstOrInit() (*dbmodels.Buttons, error)
	FirstOrCreate() (*dbmodels.Buttons, error)
	FindByPage(offset int, limit int) (result []*dbmodels.Buttons, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IButtonsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b buttonsDo) Debug() IButtonsDo {
	return b.withDO(b.DO.Debug())
}

func (b buttonsDo) WithContext(ctx context.Context) IButtonsDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b buttonsDo) ReadDB() IButtonsDo {
	return b.Clauses(dbresolver.Read)
}

func (b buttonsDo) WriteDB() IButtonsDo {
	return b.Clauses(dbresolver.Write)
}

func (b buttonsDo) Session(config *gorm.Session) IButtonsDo {
	return b.withDO(b.DO.Session(config))
}

func (b buttonsDo) Clauses(conds ...clause.Expression) IButtonsDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b buttonsDo) Returning(value interface{}, columns ...string) IButtonsDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b buttonsDo) Not(conds ...gen.Condition) IButtonsDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b buttonsDo) Or(conds ...gen.Condition) IButtonsDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b buttonsDo) Select(conds ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b buttonsDo) Where(conds ...gen.Condition) IButtonsDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b buttonsDo) Order(conds ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b buttonsDo) Distinct(cols ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b buttonsDo) Omit(cols ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b buttonsDo) Join(table schema.Tabler, on ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b buttonsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b buttonsDo) RightJoin(table schema.Tabler, on ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b buttonsDo) Group(cols ...field.Expr) IButtonsDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b buttonsDo) Having(conds ...gen.Condition) IButtonsDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b buttonsDo) Limit(limit int) IButtonsDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b buttonsDo) Offset(offset int) IButtonsDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b buttonsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IButtonsDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b buttonsDo) Unscoped() IButtonsDo {
	return b.withDO(b.DO.Unscoped())
}

func (b buttonsDo) Create(values ...*dbmodels.Buttons) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b buttonsDo) CreateInBatches(values []*dbmodels.Buttons, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b buttonsDo) Save(values ...*dbmodels.Buttons) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b buttonsDo) First() (*dbmodels.Buttons, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Buttons), nil
	}
}

func (b buttonsDo) Take() (*dbmodels.Buttons, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Buttons), nil
	}
}

func (b buttonsDo) Last() (*dbmodels.Buttons, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Buttons), nil
	}
}

func (b buttonsDo) Find() ([]*dbmodels.Buttons, error) {
	result, err := b.DO.Find()
	return result.([]*dbmodels.Buttons), err
}

func (b buttonsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodels.Buttons, err error) {
	buf := make([]*dbmodels.Buttons, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b buttonsDo) FindInBatches(result *[]*dbmodels.Buttons, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b buttonsDo) Attrs(attrs ...field.AssignExpr) IButtonsDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b buttonsDo) Assign(attrs ...field.AssignExpr) IButtonsDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b buttonsDo) Joins(fields ...field.RelationField) IButtonsDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b buttonsDo) Preload(fields ...field.RelationField) IButtonsDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b buttonsDo) FirstOrInit() (*dbmodels.Buttons, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Buttons), nil
	}
}

func (b buttonsDo) FirstOrCreate() (*dbmodels.Buttons, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodels.Buttons), nil
	}
}

func (b buttonsDo) FindByPage(offset int, limit int) (result []*dbmodels.Buttons, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b buttonsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b buttonsDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b buttonsDo) Delete(models ...*dbmodels.Buttons) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *buttonsDo) withDO(do gen.Dao) *buttonsDo {
	b.DO = *do.(*gen.DO)
	return b
}
